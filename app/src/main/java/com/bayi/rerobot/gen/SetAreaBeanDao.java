package com.bayi.rerobot.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bayi.rerobot.greendao.LocationBeanConverter;
import java.util.List;

import com.bayi.rerobot.greendao.SetAreaBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SET_AREA_BEAN".
*/
public class SetAreaBeanDao extends AbstractDao<SetAreaBean, Long> {

    public static final String TABLENAME = "SET_AREA_BEAN";

    /**
     * Properties of entity SetAreaBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Areaname = new Property(1, String.class, "areaname", false, "AREANAME");
        public final static Property IsSelected = new Property(2, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property IsDaolan = new Property(3, boolean.class, "isDaolan", false, "IS_DAOLAN");
        public final static Property Data = new Property(4, String.class, "data", false, "DATA");
    }

    private final LocationBeanConverter dataConverter = new LocationBeanConverter();

    public SetAreaBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SetAreaBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SET_AREA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AREANAME\" TEXT," + // 1: areaname
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 2: isSelected
                "\"IS_DAOLAN\" INTEGER NOT NULL ," + // 3: isDaolan
                "\"DATA\" TEXT);"); // 4: data
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SET_AREA_BEAN_AREANAME ON \"SET_AREA_BEAN\"" +
                " (\"AREANAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SET_AREA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SetAreaBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String areaname = entity.getAreaname();
        if (areaname != null) {
            stmt.bindString(2, areaname);
        }
        stmt.bindLong(3, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsDaolan() ? 1L: 0L);
 
        List data = entity.getData();
        if (data != null) {
            stmt.bindString(5, dataConverter.convertToDatabaseValue(data));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SetAreaBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String areaname = entity.getAreaname();
        if (areaname != null) {
            stmt.bindString(2, areaname);
        }
        stmt.bindLong(3, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsDaolan() ? 1L: 0L);
 
        List data = entity.getData();
        if (data != null) {
            stmt.bindString(5, dataConverter.convertToDatabaseValue(data));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SetAreaBean readEntity(Cursor cursor, int offset) {
        SetAreaBean entity = new SetAreaBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaname
            cursor.getShort(offset + 2) != 0, // isSelected
            cursor.getShort(offset + 3) != 0, // isDaolan
            cursor.isNull(offset + 4) ? null : dataConverter.convertToEntityProperty(cursor.getString(offset + 4)) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SetAreaBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAreaname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsSelected(cursor.getShort(offset + 2) != 0);
        entity.setIsDaolan(cursor.getShort(offset + 3) != 0);
        entity.setData(cursor.isNull(offset + 4) ? null : dataConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SetAreaBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SetAreaBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SetAreaBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
