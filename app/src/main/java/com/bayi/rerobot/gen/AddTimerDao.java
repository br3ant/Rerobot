package com.bayi.rerobot.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bayi.rerobot.greendao.StringConverter;
import java.util.List;

import com.bayi.rerobot.greendao.AddTimer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADD_TIMER".
*/
public class AddTimerDao extends AbstractDao<AddTimer, Long> {

    public static final String TABLENAME = "ADD_TIMER";

    /**
     * Properties of entity AddTimer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Week = new Property(1, String.class, "week", false, "WEEK");
        public final static Property Modetype = new Property(2, int.class, "modetype", false, "MODETYPE");
        public final static Property Roundnum = new Property(3, int.class, "roundnum", false, "ROUNDNUM");
        public final static Property AreaNameList = new Property(4, String.class, "areaNameList", false, "AREA_NAME_LIST");
        public final static Property State = new Property(5, boolean.class, "state", false, "STATE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
    }

    private final StringConverter areaNameListConverter = new StringConverter();

    public AddTimerDao(DaoConfig config) {
        super(config);
    }
    
    public AddTimerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADD_TIMER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WEEK\" TEXT," + // 1: week
                "\"MODETYPE\" INTEGER NOT NULL ," + // 2: modetype
                "\"ROUNDNUM\" INTEGER NOT NULL ," + // 3: roundnum
                "\"AREA_NAME_LIST\" TEXT," + // 4: areaNameList
                "\"STATE\" INTEGER NOT NULL ," + // 5: state
                "\"TIME\" TEXT);"); // 6: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADD_TIMER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddTimer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(2, week);
        }
        stmt.bindLong(3, entity.getModetype());
        stmt.bindLong(4, entity.getRoundnum());
 
        List areaNameList = entity.getAreaNameList();
        if (areaNameList != null) {
            stmt.bindString(5, areaNameListConverter.convertToDatabaseValue(areaNameList));
        }
        stmt.bindLong(6, entity.getState() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddTimer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(2, week);
        }
        stmt.bindLong(3, entity.getModetype());
        stmt.bindLong(4, entity.getRoundnum());
 
        List areaNameList = entity.getAreaNameList();
        if (areaNameList != null) {
            stmt.bindString(5, areaNameListConverter.convertToDatabaseValue(areaNameList));
        }
        stmt.bindLong(6, entity.getState() ? 1L: 0L);
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AddTimer readEntity(Cursor cursor, int offset) {
        AddTimer entity = new AddTimer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // week
            cursor.getInt(offset + 2), // modetype
            cursor.getInt(offset + 3), // roundnum
            cursor.isNull(offset + 4) ? null : areaNameListConverter.convertToEntityProperty(cursor.getString(offset + 4)), // areaNameList
            cursor.getShort(offset + 5) != 0, // state
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddTimer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeek(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModetype(cursor.getInt(offset + 2));
        entity.setRoundnum(cursor.getInt(offset + 3));
        entity.setAreaNameList(cursor.isNull(offset + 4) ? null : areaNameListConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setState(cursor.getShort(offset + 5) != 0);
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AddTimer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AddTimer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddTimer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
