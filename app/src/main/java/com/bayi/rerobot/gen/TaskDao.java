package com.bayi.rerobot.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bayi.rerobot.greendao.targetConverter;
import com.tobot.slam.data.LocationBean;

import com.bayi.rerobot.greendao.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property State = new Property(1, int.class, "state", false, "STATE");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property Floor = new Property(3, int.class, "floor", false, "FLOOR");
        public final static Property Targetname = new Property(4, String.class, "targetname", false, "TARGETNAME");
    }

    private final targetConverter targetnameConverter = new targetConverter();

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATE\" INTEGER NOT NULL ," + // 1: state
                "\"TIME\" INTEGER," + // 2: time
                "\"FLOOR\" INTEGER NOT NULL ," + // 3: floor
                "\"TARGETNAME\" TEXT);"); // 4: targetname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getState());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
        stmt.bindLong(4, entity.getFloor());
 
        LocationBean targetname = entity.getTargetname();
        if (targetname != null) {
            stmt.bindString(5, targetnameConverter.convertToDatabaseValue(targetname));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getState());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
        stmt.bindLong(4, entity.getFloor());
 
        LocationBean targetname = entity.getTargetname();
        if (targetname != null) {
            stmt.bindString(5, targetnameConverter.convertToDatabaseValue(targetname));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // state
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.getInt(offset + 3), // floor
            cursor.isNull(offset + 4) ? null : targetnameConverter.convertToEntityProperty(cursor.getString(offset + 4)) // targetname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.getInt(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFloor(cursor.getInt(offset + 3));
        entity.setTargetname(cursor.isNull(offset + 4) ? null : targetnameConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
